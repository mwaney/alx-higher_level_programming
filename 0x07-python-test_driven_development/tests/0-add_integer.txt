Import add integer method
==========================

>>> add_integer = __import__('0-add_integer').add_integer

TESTS THAT WILL PASS:
=====================

    Test case 0: both parameters are positive int number

        >>> print(add_integer(2, 1))
        3

    Test case 1: One parameter is a negative int number

        >>> print(add_integer(-2, 2))
        0

    Test case 2: Both parameters are positive floats

        >>> print(add_integer(2.5, 4.6))
        6

    Test case 3: One parameter is a negative float
        >>> print(add_integer(-3.5, 1))
        -2
    
    Test case 4: having one parameter b=98 with a default value:
        >>> print(add_integer(1))
        99

CASES THAT FAIL:
================

Test case 5: A test case function without parameters

    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Test case 6: function with extra args:
     >>> print(add_integer(1, 2, 3))
     Traceback (most recent call last):
     ...
     TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Test case 7: A test case for an argument with no assigned value

    >>> add_integer(a, 123)
    Traceback (most recent call last):
    ...
    NameError: name 'a' is not defined

Test case 8: A test case between integer and infinity float

    >>> add_integer(5, 1e400)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Test case 9: A test case between infinity float and negative integer

    >>> add_integer(999e9999, -1)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Test case 10: A test case with the first parameter of type 'list'

    >>> add_integer([1, 2], 15)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Test case 11: A test case with the first parameter of type 'None'

    >>> add_integer(None, 6)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Test case 12: A test case with the second parameter of type 'None'

    >>> add_integer(8, None)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Test case 13: A test case with the second parameter of type 'str'

    >>> add_integer(1, "Hurry")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Test case 14: special float NaN in Python (not a number):

     >>> print(add_integer(float("NaN")))
     Traceback (most recent call last):
     ...
     ValueError: cannot convert float NaN to integer

Test case 15: A test case to check the returned integer type

    >>> type(add_integer(5, 5))
    <class 'int'>


